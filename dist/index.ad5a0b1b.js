function e(e,t,a=1,r){if(!Array.isArray(e)&&!NodeList.prototype.isPrototypeOf(e)&&!HTMLCollection.prototype.isPrototypeOf(e))return;let s=1==a?0:e.length-1,l=1==a?e.length:0;for(;1==a?s<l:s>l;1==a?s++:s--)t.call(r,e[s],s)}const t=(e,t)=>{for(const a in t)Object.hasOwnProperty.call(t,a)&&(e[a]=t[a])},a=(()=>{const e={mode:"DEBUG",active_player:null,AI_interval_speed:null,AI_interval:null};return{init:(a={})=>{t(e,a)},getCurrentGameState:()=>e.current_game_state,setCurrentGameState:a=>{t(e,{current_game_state:a})}}})();var r=e=>console.log(e);const s=[{value:"A",suit:"hearts",name:"Ace of Hearts",t:2,l:0,power:"CHANGE_SUIT"},{value:13,suit:"hearts",name:"King of Hearts",t:2,l:12,power:"ANOTHER_TURN"},{value:12,suit:"hearts",name:"Queen of Hearts",t:2,l:11},{value:11,suit:"hearts",name:"Jack of Hearts",t:2,l:10},{value:10,suit:"hearts",name:"10 of Hearts",t:2,l:9,power:"CHANGE_DIRECTION"},{value:9,suit:"hearts",name:"9 of Hearts",t:2,l:8},{value:8,suit:"hearts",name:"8 of Hearts",t:2,l:7,power:"MISS_TURN"},{value:7,suit:"hearts",name:"7 of Hearts",t:2,l:6},{value:6,suit:"hearts",name:"6 of Hearts",t:2,l:5},{value:5,suit:"hearts",name:"5 of Hearts",t:2,l:4},{value:4,suit:"hearts",name:"4 of Hearts",t:2,l:3},{value:3,suit:"hearts",name:"3 of Hearts",t:2,l:2},{value:2,suit:"hearts",name:"2 of Hearts",t:2,l:1,power:"PICKUP_2"},{value:"A",suit:"clubs",name:"Ace of Clubs",t:0,l:0,power:"CHANGE_SUIT"},{value:13,suit:"clubs",name:"King of Clubs",t:0,l:12,power:"ANOTHER_TURN"},{value:12,suit:"clubs",name:"Queen of Clubs",t:0,l:11},{value:11,suit:"clubs",name:"Jack of Clubs",t:0,l:10,power:"PICKUP_7"},{value:10,suit:"clubs",name:"10 of Clubs",t:0,l:9,power:"CHANGE_DIRECTION"},{value:9,suit:"clubs",name:"9 of Clubs",t:0,l:8},{value:8,suit:"clubs",name:"8 of Clubs",t:0,l:7,power:"MISS_TURN"},{value:7,suit:"clubs",name:"7 of Clubs",t:0,l:6},{value:6,suit:"clubs",name:"6 of Clubs",t:0,l:5},{value:5,suit:"clubs",name:"5 of Clubs",t:0,l:4},{value:4,suit:"clubs",name:"4 of Clubs",t:0,l:3},{value:3,suit:"clubs",name:"3 of Clubs",t:0,l:2},{value:2,suit:"clubs",name:"2 of Clubs",t:0,l:1,power:"PICKUP_2"},{value:"A",suit:"diamonds",name:"Ace of Diamonds",t:1,l:0,power:"CHANGE_SUIT"},{value:13,suit:"diamonds",name:"King of Diamonds",t:1,l:12,power:"ANOTHER_TURN"},{value:12,suit:"diamonds",name:"Queen of Diamonds",t:1,l:11},{value:11,suit:"diamonds",name:"Jack of Diamonds",t:1,l:10},{value:10,suit:"diamonds",name:"10 of Diamonds",t:1,l:9,power:"CHANGE_DIRECTION"},{value:9,suit:"diamonds",name:"9 of Diamonds",t:1,l:8},{value:8,suit:"diamonds",name:"8 of Diamonds",t:1,l:7,power:"MISS_TURN"},{value:7,suit:"diamonds",name:"7 of Diamonds",t:1,l:6},{value:6,suit:"diamonds",name:"6 of Diamonds",t:1,l:5},{value:5,suit:"diamonds",name:"5 of Diamonds",t:1,l:4},{value:4,suit:"diamonds",name:"4 of Diamonds",t:1,l:3},{value:3,suit:"diamonds",name:"3 of Diamonds",t:1,l:2},{value:2,suit:"diamonds",name:"2 of Diamonds",t:1,l:1,power:"PICKUP_2"},{value:"A",suit:"spades",name:"Ace of Spades",t:3,l:0,power:"CHANGE_SUIT"},{value:13,suit:"spades",name:"King of Spades",t:3,l:12,power:"ANOTHER_TURN"},{value:12,suit:"spades",name:"Queen of Spades",t:3,l:11},{value:11,suit:"spades",name:"Jack of Spades",t:3,l:10,power:"PICKUP_7"},{value:10,suit:"spades",name:"10 of Spades",t:3,l:9,power:"CHANGE_DIRECTION"},{value:9,suit:"spades",name:"9 of Spades",t:3,l:8},{value:8,suit:"spades",name:"8 of Spades",t:3,l:7,power:"MISS_TURN"},{value:7,suit:"spades",name:"7 of Spades",t:3,l:6},{value:6,suit:"spades",name:"6 of Spades",t:3,l:5},{value:5,suit:"spades",name:"5 of Spades",t:3,l:4},{value:4,suit:"spades",name:"4 of Spades",t:3,l:3},{value:3,suit:"spades",name:"3 of Spades",t:3,l:2},{value:2,suit:"spades",name:"2 of Spades",t:3,l:1,power:"PICKUP_2"}],l=(()=>{const a=s,l=[],n={starting_hand_size:7},i=()=>{u(a,c,y)},u=(t,a,r)=>{let s,l;e(t,((e,t)=>{s=Math.floor(Math.random()*t),l=a(t-1),r(t-1,a(s)),r([s],l)}),-1)},o=()=>l.length,c=e=>a.splice(e,1)[0],d=e=>l.splice(e,1)[0],p=e=>a.splice(0,e),m=e=>l.splice(e,1)[0],y=(e,t)=>{a.splice(e,0,t)},_=(e,t)=>{l.splice(e,0,t)},f=e=>{a.unshift(e)},P=e=>{l.unshift(e)};return{init:e=>{t(n,e)},prepareDeck:()=>{i(),_(0,c(0))},getPickupDeck:()=>a,getPickupDeckSize:()=>a.length,getPickupDeckTopCard:()=>a[0],removeCardByIndexFromPickupDeck:c,removeFirstNCardsFromPickupDeck:p,removeCardAtIndexFromPickupDeck:e=>a.splice(e,1)[0],insertCardAtIndexToPickupDeck:y,insertToTopOfPickupDeck:f,getDiscardDeck:()=>l,getDiscardDeckSize:o,getDiscardDeckTopCard:()=>l[0],removeCardByIndexFromDiscardDeck:d,removeFirstNCardsFromDiscardDeck:e=>l.splice(0,e),removeCardAtIndexFromDiscardDeck:m,insertCardAtIndexToDiscardDeck:_,insertToTopOfDiscardDeck:P,shufflePickUpDeck:i,shuffleDiscardDeck:()=>{u(l,d,_)},swapDecks:()=>{r("Refilling Pickup Deck from Discard Deck");const e=m(0);for(let e=0;e<o();e++)f(d(e));P(e)},dealCards:t=>{e(t,((e,t)=>{let a=p(n.starting_hand_size);e.addCards(a)}))}}})(),n="IDLE",i="TO_PLAY",u="HAS_PLAYED",o="DID_PICKUP",c="DID_PUTDOWN",d="NO_ACTION",p="MUST_PICK_2",m="MUST_PICK_7",y="MUST_MISS_TURN",_="EFFECT_ANOTHER_TURN",f="EFFECT_NO_EFFECT",P=(()=>{const a={num_players:4,player_list:[],current_player_idx:0,previous_player_idx:null,next_player_idx:null,play_direction:1},s=()=>{let e=a.current_player_idx+a.play_direction;return e<0?a.num_players-1:e>=a.num_players?0:e},l=()=>{let e=a.current_player_idx-a.play_direction;return e<0?a.num_players-1:e>=a.num_players?0:e};return{init:e=>{t(a,e),a.previous_player_idx=l(),a.next_player_idx=s()},createPlayers:s=>{e(s,(e=>{let s=(()=>{const e={name:null,deck:[],el:null,is_human:!1,status:{play_state:n,action:d,effect:f}};return{init:a=>{t(e,a)},addCard:t=>{e.deck.push(t)},addCards:t=>{e.deck=e.deck.concat(t)},removeCard:({value:t,suit:a})=>{let r=e.deck.findIndex((e=>e.value==t&&e.suit==a));return r<0&&console.error("Selected player card not found"),e.deck.splice(r,1)[0]},removeCardAtIndex:t=>{e.deck.splice(t,1)[0]},removeCards:(t,a)=>{e.deck.splice(t,a)},getPlayerName:()=>e.name,getCurrentCards:()=>e.deck,getIsHuman:()=>e.is_human,getHandSize:()=>e.deck.length,getPlayerEl:()=>e.el,resetStatus:()=>{e.status={play_state:n,action:d,effect:f}},getStatus:()=>e.status,updatePlayState:t=>{[n,i,u].includes(t)||r(`${e.name} [state.play_state] provided unacceptable state: ${t}`),e.status.play_state=t,r(`${e.name} [state.play_state] is now ${t}`)},getPlayState:()=>e.status.play_state,updateActionState:t=>{[o,c,d].includes(t)||r(`${e.name} [state.action_state] provided unacceptable state: ${t}`),e.status.action=t,r(`${e.name} [state.action] is now ${t}`)},getActionState:()=>e.status.action,updateEffectState:t=>{[p,m,y,_,f].includes(t)||r(`${e.name} [state.effect_state] provided unacceptable state: ${t}`),e.status.effect=t,r(`${e.name} [state.effect] is now ${t}`)},getEffectState:()=>e.status.effect}})();s.init({is_human:e.is_human,name:e.name,el:e.el}),a.player_list.push(s)}))},setNextActivePlayer:()=>{a.current_player_idx=a.next_player_idx,a.previous_player_idx=l(),a.player_list[a.previous_player_idx].resetStatus(),a.next_player_idx=s();let e=a.player_list[a.current_player_idx];e.getEffectState()===f&&e.updatePlayState(i),r(`Current active player is now: ${e.getPlayerName()}`)},getCurrentActivePlayer:()=>a.player_list[a.current_player_idx],getCurrentActivePlayerIdx:()=>a.current_player_idx,getCurrentNextPlayer:()=>a.player_list[a.next_player_idx],getCurrentNextPlayerIdx:()=>a.next_player_idx,getCurrentPreviousPlayer:()=>a.player_list[a.previous_player_idx],getCurrentPreviousPlayerIdx:()=>a.previous_player_idx,getPlayerList:()=>a.player_list,changePlayDirection:()=>{a.play_direction=-1*a.play_direction,a.next_player_idx=a.previous_player_idx}}})(),g=(()=>{const e={pickup_deck_el:null,discard_deck_el:null,updates_board_el:null,card_w:59,card_h:90},a=(t,a)=>`<img class="${a?"face_up":"face_down"}" style="background-position: -${t.l*e.card_w}px -${t.t*e.card_h}px;"/>`;return{init:(a={})=>{t(e,a)},createListedCardHTML:(e,t)=>`<li class="card" data-v="${e.value}" data-s="${e.suit}">\n                ${a(e,t)}\n            </li>`,createCardHTML:a,getPickupDeck:()=>e.pickup_deck_el,getDiscardDeck:()=>e.discard_deck_el,getGameUpdateBoard:()=>e.updates_board_el}})();var v=()=>{e(P.getPlayerList(),(t=>{const a=t.getCurrentCards(),r=t.getPlayerEl().querySelector(".card_list");r.innerHTML="",e(a,(e=>{r.insertAdjacentHTML("beforeend",g.createListedCardHTML(e,t.getIsHuman()))}))}))},C=drawDiscardDeck=()=>{let e=l.getDiscardDeck()[0];g.getDiscardDeck().innerHTML=g.createCardHTML(e,!0)},k=updateView=()=>{v(),C()},h=outputToBoard=e=>{const t=g.getGameUpdateBoard();t.insertAdjacentHTML("beforeend",`<p>${e}</p>`),t.scrollTop=t.scrollHeight},D=hasWinConditionBeenReached=()=>{r("[hasWinConditionBeenReached] Checking win condition");let e=P.getCurrentActivePlayer().getHandSize();return r(`[hasWinConditionBeenReached] Player has ${e} cards remaining`),0===e},S=applyPowerEffect=e=>{const t=P.getCurrentActivePlayer(),a=P.getCurrentNextPlayer();switch(e){case"CHANGE_DIRECTION":h("Direction of play is reversed!"),P.changePlayDirection();break;case"CHANGE_SUIT":h("New suit chosen! [TODO]");break;case"ANOTHER_TURN":h(`${t.getPlayerName()} to take another turn!`),t.updateEffectState(_);break;case"MISS_TURN":h(`${a.getPlayerName()} to miss a turn!`),a.updateEffectState(y);break;case"PICKUP_2":h(`${a.getPlayerName()} must pick up 2 cards!`),a.updateEffectState(p);break;case"PICKUP_7":h(`${a.getPlayerName()} must pick up 7 cards!`),a.updateEffectState(m);break;default:debugDetail(`[applyPowerEffect] Unknown power applied! ${e}`)}},A=checkLegalPlayableMove=({value:e,suit:t})=>{const a=l.getDiscardDeckTopCard();return e==a.value||t==a.suit},T=handlePlayCard=({value:e,suit:t})=>{let a=P.getCurrentActivePlayer();const s=a.removeCard({value:e,suit:t});r(`[playCard] Playing card: ${s.name}`),l.insertToTopOfDiscardDeck(s),a.updateActionState(c),outputToBoard(`${a.getPlayerName()} has played the ${s.name}`),updateView()},I=playCard=({value:e,suit:t})=>(r("[handlePlayCard] Attempting to play"),A({value:e,suit:t})?(T({value:e,suit:t}),!0):(r("[handlePlayCard] Card not playable"),h("That card isn't playable!"),!1)),w=onAIPlayerCardSelect=e=>{r("[onAIPlayerCardSelect] Playing a card from hand");let t=e.filter((function(e){return void 0!==e.power})),a=null;a=t.length&&Math.random()>.4?t[Math.floor(Math.random()*t.length)]:e[Math.floor(Math.random()*e.length)],I({value:a.value,suit:a.suit}),U()},E=pickupCardFromDeck=()=>{r("[pickupCardFromDeck] Picking up card");let e=P.getCurrentActivePlayer(),t=l.removeCardByIndexFromPickupDeck(0);e.addCard(t),r(`[pickupCardFromDeck] Picked up card: ${t.name}`),l.getPickupDeckSize()<=0&&l.swapDecks(),e.updateActionState(o),h(`${e.getPlayerName()} has picked up`),k()},N=handleCardPickup=e=>{E(),U()},b=chooseAIPlayerActionChoice=()=>{const e=Players.getCurrentActivePlayer().getCurrentCards().filter((e=>A(e)));r(`[chooseAIPlayerActionChoice] Number of playable cards: ${e.length}`),e.length&&Math.random()>=.3?(r("[chooseAIPlayerActionChoice] Player has chosen to play a card"),w(e)):(r("Player must pickup"),N())},H=handleTurnBegin=()=>{let e=P.getCurrentActivePlayer();e.getEffectState()!==f?(r(`Current player is affected by ${e.getEffectState()}`),x(e,e.getEffectState())):(outputToBoard(`${e.getPlayerName()} to play...`),e.getIsHuman()||(r("[chooseAIPlayerActionChoice] Player is thinking..."),window.setTimeout(b,2e3)))},x=resolvePowerEffectState=(e,t)=>{const a=P.getCurrentActivePlayer();switch(t){case _:r("[resolvePowerEffectState] Player taking another turn [TODO]"),a.resetStatus(),a.updatePlayState(i),H();break;case y:r("[resolvePowerEffectState] Missing Turn"),U();break;case p:r("[resolvePowerEffectState] Picking up 2 cards");for(let e=0;e<2;e++)E();U();break;case m:for(let e=0;e<7;e++)E();U();break;default:r(`[resolvePowerEffectState] Unknown effect state applied! ${t}`)}},$=onEndTurn=()=>{P.setNextActivePlayer(),r(`[chooseAIPlayerActionChoice] It is now ${P.getCurrentActivePlayer().getPlayerName()}s turn`),H()},U=endTurn=()=>{const e=P.getCurrentActivePlayer();if(e.updatePlayState(u),r("[endTurn] Ending turn..."),r(`[endTurn] actionState of current player: ${e.getActionState()}`),e.getActionState()===c){const t=Deck.getDiscardDeckTopCard();if(t.power&&(r(`[endTurn] Card putdown is a power card: ${t.power}`),h("It's a power card!"),S(t.power),e.getEffectState()!==f))return void x(e,e.getEffectState())}D()?(h(`${P.getCurrentActivePlayer().getPlayerName()} is the winner!`),r(`[endTurn] ${P.getCurrentActivePlayer().getPlayerName()} has won!`)):(r("------------"),$())},M=onHumanPlayerCardSelect=e=>{if(r("[onHumanPlayerCardSelect]"),!P.getCurrentActivePlayer().getIsHuman())return void r("[onHumanPlayerCardSelect] Human player not currently active");const t=e.target.parentNode||e.srcElement.parentNode;if("card"==t.className){const e=t.getAttribute("data-v"),a=t.getAttribute("data-s");I({value:e,suit:a})&&U()}};window.Game=a,window.Deck=l,window.Players=P,window.View=g;document.querySelector("#game_instructions button").addEventListener("click",(()=>{document.querySelector("#game_instructions").remove(),a.init({}),P.init({num_players:4}),g.init({pickup_deck_el:document.getElementById("pickup_deck"),discard_deck_el:document.getElementById("discard_deck"),updates_board_el:document.getElementById("game_updates")}),l.init({}),P.createPlayers([{el:document.getElementById("Player_0"),is_human:!0,name:"Human Player"},{el:document.getElementById("Player_1"),is_human:!1,name:"AI Player 1"},{el:document.getElementById("Player_2"),is_human:!1,name:"AI Player 2"},{el:document.getElementById("Player_3"),is_human:!1,name:"AI Player 3"}]),l.prepareDeck(),l.dealCards(P.getPlayerList()),k(),document.querySelector("#pickup_deck").addEventListener("mousedown",N),P.getPlayerList().find((function(e){return e.getIsHuman()})).getPlayerEl().querySelector(".card_list").addEventListener("mousedown",M),h(`The starting card is a ${l.getDiscardDeckTopCard().name}`)}));
//# sourceMappingURL=index.ad5a0b1b.js.map
